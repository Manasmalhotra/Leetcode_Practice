You are given an integer array nums of length n, and an integer array queries of length m.

Return an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Approach: Sort the array since we only need length for eac query. Now apply binary search on prefix array to get answer.
TC:O(NlogN+N+Q*logN)
SC:O(N)


class Solution {
public:
    int binarysearch(vector<int>prefix,int x){
        int high=prefix.size()-1,low=0,mid,ans=-1;
        while(low<=high){
            mid=low+(high-low)/2;
            if(prefix[mid]<=x){
                ans=mid;
                low=mid+1;
            }
            else{
                high=mid-1;
            }
        }
        return ans;
    }
    
    vector<int> answerQueries(vector<int>& nums, vector<int>& queries) {
        int i,n=nums.size();
        sort(nums.begin(),nums.end());
        vector<int>prefix(n,0);
        
        prefix[0]=nums[0];
        for(i=1;i<n;i++){
            prefix[i]=prefix[i-1]+nums[i];
        }
        
        int m=queries.size();
        vector<int>result;
        for(i=0;i<m;i++){
            int index=binarysearch(prefix,queries[i]);
            if(index==-1){
                result.push_back(0);
            }
            else{
            result.push_back(index+1);
            }
        }
        return result;
    }
};
