https://leetcode.com/problems/where-will-the-ball-fall/

You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.

Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.

A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.
A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.
We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a "V" shaped pattern between two boards or if a board redirects the ball into either wall of the box.

Return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
grid[i][j] is 1 or -1.


Approach: Just do what the question is saying. Take each ball from row 0 for all the columns and take the ball through the given route,if it is able to surpass the bottom 
boundary then update the column which will come as the ball will pass the boundary, else update ans vector with -1.

TC:O(M*N)


class Solution {
public:
    vector<int> findBall(vector<vector<int>>& grid) {
       int i,j,n=grid.size(),m=grid[0].size(),prev_c;
       vector<int>ans;
       for(j=0;j<m;j++){
           int r=0;
           int c=j;
           int f=0;
           
           while(r>=0 && r<n && c>=0 && c<m){
               if(c+grid[r][c]>=0 && c+grid[r][c]<m){
                   if(grid[r][c]!=grid[r][c+grid[r][c]]){
                       f=1;
                       break;
                   }
               }
               else{
                   f=1;
                   break;
               }
               c=c+grid[r][c];
               r+=1;
           }
           if(f==1){
               ans.push_back(-1);
           }
           else{
               ans.push_back(c);
           }
       }
        return ans;
    }
};
