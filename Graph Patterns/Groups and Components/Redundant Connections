https://leetcode.com/problems/number-of-operations-to-make-network-connected/description/
Approach: to connect n nodes we need n-1 edges if we do not have those many edges then it is not possible to arrange.
If we have it is always possible to rearrange. we would need component-1 edges to connect all components together.

class Solution {
public:
    void dfs(vector<int>adj[],vector<int>&vis,int src){
       if(vis[src]==1){
           return;
       }
       vis[src]=1;
       for(int i=0;i<adj[src].size();i++){
           dfs(adj,vis,adj[src][i]);
       }
    }

    int makeConnected(int n, vector<vector<int>>& connections) {
        int i,m=connections.size();
        vector<int>adj[n];
        if(m < n - 1)
            return -1;
        for(i=0;i<m;i++){
            adj[connections[i][0]].push_back(connections[i][1]);
             adj[connections[i][1]].push_back(connections[i][0]);
        }

        vector<int>vis(n,0);
        int componentCount=0;
        for(i=0;i<n;i++){
            if(vis[i]==0){
                dfs(adj,vis,i);
                componentCount++;
            }
        }

        return componentCount-1;
    }
};
