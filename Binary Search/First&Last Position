/*
3 3 3 3 4 4 5 6

Target: 3

7+0/2=3
3==3
result=3
high=mid-1
0+2/2=1
3==3
result=1
high=mid-1

As high==low
mid=low
arr[mid]==3
result=0

0 1 2 3 4 5 6 7
1 2 3 3 4 4 4 4

Target : 4

0+7/2=3
As 3<4
low=mid+1=4
4+7/2=5
4==4
low=mid+1=5
mid=5+7/2=6
arr[mid]==4
low=mid+1=6
arr[mid]==4
result=6
low=mid+1=7
as low==high
arr[mid]==4
result=7
*/


//Code

class Solution {
public:
    int leftmost(vector<int>nums,int target){
        int result=-1,low=0,high=nums.size()-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                result=mid;
                high=mid-1;
            }
            else if(nums[mid]>target){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        
        return result;
    }
    
        int rightmost(vector<int>nums,int target){
        int result=-1,low=0,high=nums.size()-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                result=mid;
                low=mid+1;
            }
            else if(nums[mid]>target){
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        
        return result;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
       
        vector<int>result(2,-1);
        int n=nums.size();
        if(n==0){
            return result;
        }
        result[0]=leftmost(nums,target);
        result[1]=rightmost(nums,target);
        return result;
    }
};
