//https://leetcode.com/problems/maximum-sum-circular-subarray/description/

Approach:
There can be two cases : Either the max sum subarray gives us the correct answer wiihou any wrap around property.
                         If wrap around property exists, part of the array coming in between of the maximum sum will be contributing to min sum. Thus remove this cts part.
TC:O(N)
SC:O(1)

class Solution {
public:
    int maxSubarraySumCircular(vector<int>& nums) {
       int i,n=nums.size();
       int max_sum=INT_MIN,temp_maxsum=0,min_sum=INT_MAX,temp_minsum=0,sum=0;
       for(i=0;i<n;i++){
           temp_maxsum+=nums[i];
           temp_minsum+=nums[i];
           sum+=nums[i];
           if(temp_maxsum>max_sum){
               max_sum=temp_maxsum;
           }
           if(temp_minsum<min_sum){
               min_sum=temp_minsum;
           }
           if(temp_maxsum<0){
               temp_maxsum=0;
           }
           if(temp_minsum>0){
               temp_minsum=0;
           }
       }
       if(sum==min_sum){
           return max_sum;
       }
       return max(max_sum,sum-min_sum); 
    }
};
