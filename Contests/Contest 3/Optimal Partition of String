Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.

Return the minimum number of substrings in such a partition.

Note that each character should belong to exactly one substring in a partition.

Example 1:

Input: s = "abacaba"
Output: 4
Explanation:
Two possible partitions are ("a","ba","cab","a") and ("ab","a","ca","ba").
It can be shown that 4 is the minimum number of substrings needed.

Here this sliding window approach will not work.
Because eg:shkabyutdvknyrp  ==>>  shkabyutdv|kny|rp This approach works like this. Like it will increase the count while shifting the window for y also.
But it should have been like: shkabyutdv|knyrp, that is when repetition of k was encountered the window should have maintained start=second index of k.

TC:O(N)
class Solution {
public:
    int partitionString(string s) {
        int i,n=s.length();
        vector<int>freq(26,0);
        for(i=0;i<n;i++){
            if(freq[s[i]-'a']!=0){
                break;
            }
            freq[s[i]-'a']+=1;
        }
        
        int start=0,end=i,count=1,f=1;
        while(end<n){
            while(freq[s[end]-'a']>0){
                freq[s[start]-'a']-=1;
                start++;
                if(f==1){
                    cout<<start<<" "<<end<<endl;
                    count+=1;
                    f=0;
                }
            }
            freq[s[end]-'a']+=1;
            f=1;
            end++;
        }
        return count;
    }
};

TC:  O(N)
SC:O(N)

This approach works as when s=shkabyutdvknyrp then shkabyutdv|knyrp here you reset the complete window na.. So it will give you the minimum partition beacuse anyways 
partition will increase by 1 so increase by resetting completely.

class Solution {
public:
    int partitionString(string s) {
       unordered_map<char,int> mp; 
        int cnt=1;        
        for(int i=0;i<s.size();i++){
            if(!mp[s[i]]){          
                mp[s[i]]++;
            }
            else{ 
                cnt++;              
                mp.clear();          
                mp[s[i]]++;  
            }
        }
        return cnt;
    }
};

