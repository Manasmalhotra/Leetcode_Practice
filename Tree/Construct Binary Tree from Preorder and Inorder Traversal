Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

// Approach: Te main root always exist at index 0, find the value at this index in the inorder to get the spilt of left and right subtrees. As PREORDER follows ROOT LEFT RIGHT.
Recursively call for first the left subtree and then the right one.


class Solution {
public:
    TreeNode* buildTree(vector<int>& pre, vector<int>& in) {
       int n=in.size();
       int index=0;
       return build(pre,in,index,0,n-1);
    }
    
    TreeNode* build(vector<int>&pre,vector<int>&in,int &index,int start,int end){
        if(start>end){
            return NULL;
        }
        TreeNode*root=new TreeNode(pre[index++]);
        int finds=find(in.begin(),in.end(),root->val)-in.begin();
        root->left=build(pre,in,index,start,finds-1);
        root->right=build(pre,in,index,finds+1,end);
        return root;
    }
};

TC: O(N) SC:O(N)


