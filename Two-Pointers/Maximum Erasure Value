You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).

Example: Input: nums = [5,2,1,2,5,2,1,2,5]
Output: 8
Explanation: The optimal subarray here is [5,2,1] or [1,2,5].

The inner while loop is required because when r=3 we need to move l beacuse we need subarray with unique elements then l=1 still l needs to be moved because arr[l]=2.
Now when l=2==> This is valid as now 2 is not a part of the subarray.

class Solution {
    public int maximumUniqueSubarray(int[] nums) {
       int l=0,r=0,sum=0,n=nums.length,maxx=-10000;
       HashMap<Integer,Integer> maps=new HashMap<>();
       while(r<n){
           while(maps.containsKey(nums[r])){
               sum-=nums[l];
               maps.remove(nums[l]);
               l++;
           }
           sum+=nums[r];
           maps.put(nums[r],1);
           maxx=Math.max(maxx,sum);
           r++;
       }
       return maxx;
    }
}
