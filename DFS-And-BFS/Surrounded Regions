class Solution {
public:
    void dfs(vector<vector<char>>&board,vector<vector<int> >&vis,int i,int j,int n,int m){
        if(i>=0 && i<n && j<m && j>=0 && board[i][j]=='O'){
        vis[i][j]=1;
        board[i][j]='C';
        dfs(board,vis,i,j+1,n,m);
        dfs(board,vis,i+1,j,n,m);
        dfs(board,vis,i,j-1,n,m);
        dfs(board,vis,i-1,j,n,m);
        }
    }
    
    bool isBoundary(vector<vector<char>>&board,int i,int j,int n,int m){
        if(board[i][j]=='O' && (i==0 || i==n-1 || j==0 || j==m-1)){
            return true;
        }
        return false;
    }
    
    void solve(vector<vector<char>>& board) {
      int n=board.size(),m=board[0].size(),i,j;
      vector<vector<int>> vis( n , vector<int> (m, 0));
      for(i=0;i<n;i++){
          for(j=0;j<m;j++){
              if(vis[i][j]==0 && isBoundary(board,i,j,n,m)){
                  dfs(board,vis,i,j,n,m);
              }
          }
      }
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                if(board[i][j]=='C'){
                    board[i][j]='O';
                }
                else if(board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
    }
};
