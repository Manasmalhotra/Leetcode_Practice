//https://leetcode.com/problems/all-paths-from-source-to-target/

//Backtrack after each path so as to make all nodes available when searching other paths.

class Solution {
public:
    void dfs(vector<vector<int>>& graph,vector<int>&vis,int source,int target,vector<vector<int>> &result,vector<int> path){
        
        if(source==target){
            path.push_back(target);
            result.push_back(path);
        }
        vis[source]=1;
        path.push_back(source);
        int n=graph[source].size();
        for(int i=0;i<n;i++){
            if(vis[graph[source][i]]==0){
                dfs(graph,vis,graph[source][i],target,result,path);
            }
        }
        vis[source]=0;
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>vis(n,0);
        vector<int>path;
        vector<vector<int> > result;
        dfs(graph,vis,0,n-1,result,path);
        return result;
    }
};
