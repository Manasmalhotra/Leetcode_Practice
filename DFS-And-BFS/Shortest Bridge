 void dfs(vector<vector<int> >&grid,vector<vector<int> >&vis,int i,int j){
        if(i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || vis[i][j]==1 || grid[i][j]==0){
            return;
        }
        vis[i][j]=1;
        grid[i][j]=2;
        dfs(grid,vis,i-1,j);
        dfs(grid,vis,i+1,j);
        dfs(grid,vis,i,j+1);
        dfs(grid,vis,i,j-1);
    }
    
    int shortestBridge(vector<vector<int>>& grid) {
    int i,j,f=0,n=grid.size(),m=grid[0].size();
    vector<vector<int> >vis(n,vector<int>(m,0));
    
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                if(grid[i][j]==1){
                   dfs(grid,vis,i,j); 
                   f=1;
                   break;
                }
            }
              if(f){
                    break;
                }
        }
        
        queue<pair<int,int> >q;
        
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                if(grid[i][j]==1){
                    q.push(make_pair(i,j));
                }
            }
        }
        for(i=0;i<n;i++){
            for(j=0;j<m;j++){
                cout<<grid[i][j]<<" ";
            }
            cout<<endl;
        }
        int dist=0;
        vector<vector<int> >res={{-1,0},{0,-1},{1,0},{0,1}};
        vector<vector<int> >vis1(n,vector<int>(m,0));
        
        while(!q.empty()){
            int s=q.size();
            cout<<"SIZE"<<s<<endl;
            dist+=1;
             while(s--){
                pair<int,int>temp=q.front();
                q.pop();
                cout<<temp.first<<" "<<temp.second<<endl;
                if(grid[temp.first][temp.second]==2){
                    return dist-2;
                }
            for(int i=0;i<4;i++){
                int row=temp.first+res[i][0];
                int col=temp.second+res[i][1];
                 if(row>=0 && col>=0 && row<n && col<m && vis1[row][col]==0){
                        q.push({row,col});
                        vis1[row][col]=1;
                }
            }
            }
        }
 return dist-2;
    
    }
