You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:

numberOfBoxesi is the number of boxes of type i.
numberOfUnitsPerBoxi is the number of units in each box of the type i.
You are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize.

Return the maximum total number of units that can be put on the truck.

//This is a Greedy Problem because here we have to maximise the number of units that can be kept.. This should no be confused with a DP problem because here box of each type 
//occupies the same space it is not case of variable weights that can create an optimization of parameters type problem.
//For say in example : boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
//Here each box will take the same space but we will first place (1,3) beacuse it represents 1 box with 3 units.That is it contains maximum units. After that we will take 
//2,2 because here we have 2 boxes that contain 2 units which is greater than the last type of box containing just 1 unit.


class Solution {
public:
    static bool compare(vector<int>&v1,vector<int>&v2){
        if(v1[1]==v2[1]){
            return v2[0]<v1[0];
        }
        else{
            return v2[1]<v1[1];
        }
    }
    
    int maximumUnits(vector<vector<int>>& boxTypes, int truckSize) {
        sort(boxTypes.begin(),boxTypes.end(),compare);
        int i=0,count=0,n=boxTypes.size();
        while(i<n){
            if(boxTypes[i][0]<truckSize){
                count+=(boxTypes[i][0]*boxTypes[i][1]);
                truckSize-=boxTypes[i][0];
            }
            else{
                count+=(truckSize)*boxTypes[i][1];
                break;
            }
            i++;
        }
        return count;
    }
};
