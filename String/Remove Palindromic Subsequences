You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.

Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".

Now here is the trick: Case 1 : If string is empty==> 0 operations
                       Case 2 : If string is a palindrome=> 1 operation.
                       Case 3: If string is not a palindrome then we have to delete "subsequences" containing only 2 characters which will at most cost us 2 operations
                       example: a b b b b a a a b b a.
                       Here since it is not a palindrome, we can delete the sequence of a at one time and b on the second time.
                       
 class Solution {
public:
    int removePalindromeSub(string s) {
        int left=0,right=s.length()-1;
        while(left<=right){
            if(s[left]==s[right]){
                left++;
                right--;
            }
            else{
                return 2;
            }
        }
        return 1;
    }
};
