Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.
Approach: Apply Kruskal's Algorithm.

class Solution {
public:
    int find(int node,vector<int>&parent){
    if(parent[node]==node){
        return node;
    }
    return parent[node]=find(parent[node],parent); 
//Whenever we go for finding the root of a node we are storing the obtained result.
//So for every node we are finding the root only once. Thus average tc of this find function is O(1).
}

    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
    int i,n=edges.size(),cost=0;
    vector<int>result;
    vector<int>parent(n,-1);
    for(i=0;i<n;i++){
        parent[i]=i;
    }
    for(i=0;i<n;i++){
       int p1=find(edges[i][0]-1,parent);
       int p2=find(edges[i][1]-1,parent);
       if(p1!=p2){
           parent[min(p1,p2)]=max(p1,p2);
       }
       else{
           result=edges[i];
       }
    }
      return result;
    }
};
