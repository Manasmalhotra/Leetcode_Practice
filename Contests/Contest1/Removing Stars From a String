You are given a string s, which contains stars *.

In one operation, you can:

Choose a star in s.
Remove the closest non-star character to its left, as well as remove the star itself.
Return the string after all stars have been removed.

Note:

The input will be generated such that the operation is always possible.
It can be shown that the resulting string will always be unique.

Example 1:

Input: s = "leet**cod*e"
Output: "lecoe"
Explanation: Performing the removals from left to right:
- The closest character to the 1st star is 't' in "leet**cod*e". s becomes "lee*cod*e".
- The closest character to the 2nd star is 'e' in "lee*cod*e". s becomes "lecod*e".
- The closest character to the 3rd star is 'd' in "lecod*e". s becomes "lecoe".
There are no more stars, so we return "lecoe".

Approach: The problem here is the * can be anywhere in any number of times.Also a * at index 0 has no significance.Therefore we start iterating from back
and mainatin a count of spaces. If s[i]=* we do spaces++ else if spaces>0 then this character will be deleted by skipping it , else if spaces==0 
then add the character in result.
TC:O(N)
SC:O(N)

class Solution {
public:
    string removeStars(string s) {
       int i,n=s.length(),count=0;
       string res;
       for(i=n-1;i>=0;i--){
           if(s[i]=='*'){
               count++;
           }
           else if(count>0){
               count--;
               continue;
           }
           else{
               res+=s[i];
           }
       }
        reverse(res.begin(),res.end());
        return res;
    }
};
