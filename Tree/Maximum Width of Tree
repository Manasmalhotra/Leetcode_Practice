Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.

It is guaranteed that the answer will in the range of a 32-bit signed integer.

Approach: What if number the nodes as they will be stored using an rray where index of parent is i and the children are at 2*i+1,2*i+2.
But there is a issue in this approach that this can quickly overflow.
Therefore we update index of the number the nodes wrt to previous level only(like previous level:0,1 then update this level indices as 1 2 3 4, Now in next 
iteration get width of this level using these indices. Since now this 1 2 3 4 level has become previous level consider indices of next level as 2*i+1 and 2*i+2 
but before that reset i to start frm 0 by subtracting 1 from each of 1,2,3,4 as 1 is the min index of the previous level).
And by taking examples, we conclude that this also works.
Now when this level becomes previous level we subtract the minimum index from all the coming indices so as to again start with zero.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
TC:O(N) [BFS Travesal] SC:O(N) [Queue]
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        queue<pair<TreeNode*,int> >q;
        q.push({root,0});
        int maxx=0;
        while(!q.empty()){
            int n=q.size();
            int start=q.front().second;
            int end=q.back().second;
            maxx=max(maxx,end-start+1);
            while(n--){
                pair<TreeNode*,int>p=q.front();
                q.pop();
                TreeNode*temp=p.first;
                int i=p.second-start;
                if(temp->left!=NULL){
                    q.push({temp->left,2LL*i+1});
                }
                if(temp->right!=NULL){
                    q.push({temp->right,2LL*i+2});
                }
            }
        }
        return maxx;
    }
};
