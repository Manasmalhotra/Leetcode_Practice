Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.

Return the quotient after dividing dividend by divisor.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.

 //Note: Do not know about the solution using only integers... ----- Updated int solution below..
 
 
class Solution {
public:
    int divide(int dividend, int divisor) {
        if (dividend == INT_MIN && divisor == -1) {
            return INT_MAX;
        }
        long dvd = labs(dividend), dvs = labs(divisor), ans = 0;
        int sign = (dividend > 0) ^ (divisor > 0) ? -1 : 1;
        while (dvd >= dvs) {
            long temp = dvs, m = 1;
            while (temp << 1 <= dvd) {
                temp <<= 1;
                m <<= 1;
            }
            dvd -= temp;
            ans += m;
        }
        return sign * ans;
    }
};

INTEGER SOLUTION

class Solution {
public:
    int divide(int dividend, int divisor) {
        if (divisor==0) return INT_MAX;
        if (divisor==1 || dividend==0) return dividend;
        if (divisor==INT_MIN) {
            if (dividend==INT_MIN) return 1;
            else return 0;
        }
        if (dividend==INT_MIN) {
            if (divisor==1) return dividend;
            else if (divisor==-1) return INT_MAX; //Prevent overflow. 
            else return (((divisor&1)==1) ? divide(dividend+1,divisor):divide(dividend>>1,divisor>>1)); // If divisor is odd nd dividend is even which is not divisible by any odd number then ans will be same as dividend+1/divisor: Ex -14/3=-4 and -13/3=-4.
        }                                                                                               // for even it is clear that 24/2=12 and 12/1 also equals 12 so by this logic to avoid overflow.
        int res=0;
        int divid=abs(dividend);
        int divis=abs(divisor);
        while (divid>=divis){
            int temp=divis, multiple=1;
            while ((temp<<1)>=0 && (divid>=(temp<<1))) {
                temp <<= 1;
                multiple <<= 1;
            }
            divid -= temp;
            res += multiple;
        }
        return (dividend>0)^(divisor>0) ? -res:res; 
    }
};
