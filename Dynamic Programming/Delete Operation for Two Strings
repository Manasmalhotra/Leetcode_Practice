Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

Example 1:

Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".
Example 2:

Input: word1 = "leetcode", word2 = "etco"
Output: 4

// leetcode mein se "lede" delete kr do tab hi sab kuch common delete ho jayega.
//aabcdefg  & aef ===> abcdfg delete krdo, inn examples mein common subsequence nikal rahe dono m baaki sab delete so they will be equal after deletion.

class Solution {
    public int minDistance(String word1, String word2) {
      int i,j,n=word1.length(),m=word2.length();
      int table[][]=new int[n+1][m+1];
      for(i=0;i<=n;i++){
          for(j=0;j<=m;j++){
              if(i==0 || j==0){
                  continue;
              }
              else if(word1.charAt(i-1)==word2.charAt(j-1)){
                  table[i][j]=1+table[i-1][j-1];
              }
              else{
                  table[i][j]=Math.max(table[i-1][j],table[i][j-1]);
              }
          }
      }
        return n+m-2*table[n][m];
    }
}
