Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

//Typical two pointer approach, array is sorted so if arr[l]+arr[r]>sum then r--, if arr[l]+arr[r]<sum then l++.

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].

numbers: [2,7,11,15], target =13.
arr[l]+arr[r]=2+15=17>13 then r-- 2+11=13 ====> target acheived.

class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
      vector<int>res;
      int n=numbers.size();
      int l=0,r=n-1;
      while(l<r){
          if(numbers[l]+numbers[r]==target){
              res.push_back(l+1);
              res.push_back(r+1);
              return res;
          }
          else if(numbers[r]+numbers[l]>target){
              r--;
          }
          else{
              l++;
          }
      }
        return res;
    }
};
