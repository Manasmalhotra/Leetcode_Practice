/*
Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.
*/
bool dfs(vector<vector<int> >&grid,vector<vector<int> >&vis,int i,int j){
 if(i<0 || j<0 || i>=grid.size() || j>=grid[0].size()){
   return false;
 }
 if(vis[i][j]==1 || grid[i][j]==1){
   return true;
 }
 vis[i][j]=1;
 bool up=dfs(grid,vis,i-1,j);
 bool down=dfs(grid,vis,i+1,j);
 bool right=dfs(grid,vis,i,j+1);
 bool left=dfs(grid,vis,i,j-1);
 
 if(up && down && left && right){
  return true;
 }
 return false;
}

 int closedIsland(vector<vector<int>>& grid) {
 
 int i,j,n=grid.size(),m=grid[0].size(),count=0;
 
 for(i=0;i<n;i++){
  for(j=0;j<m;j++){
    if(vis[i][j]==0 && grid[i][j]==0){
       bool flag=dfs(grid,vis,i,j);
       if(flag){
         count+=1;
       }
    }
  }
 }
 return count;
 }
