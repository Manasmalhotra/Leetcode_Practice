You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

//Simple Brute Force type SOlution.. Just keep on comparing the to array elements and enter the suitable one in array..

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
       vector<int>res(m+n,0);
       int i=0,j=0,k=0;
       while(i<m && j<n){
           if(nums1[i]<nums2[j]){
               res[k++]=nums1[i++];
           }
           else{
               res[k++]=nums2[j++];
           }
       }
       while(i<m){
           res[k++]=nums1[i++];
       }
        while(j<n){
            res[k++]=nums2[j++];
        }
        
        for(i=0;i<k;i++){
            nums1[i]=res[i];
        }
        
    }
};

//Optimize space complexity

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
       int k=m+n-1,i=n-1,j=m-1;
        while(i>=0 && j>=0){
            if(nums2[i]>nums1[j]){
                nums1[k--]=nums2[i--];
            }
            else{
                nums1[k--]=nums1[j--];
            }
        }
        while(i>=0){ // Only this loop because it copies the remaining elements from nums2 to nums 1, if the case would have been vice-versa then nums 1 is already having its elements in nums1 i.e. itself.
                     // So then, they would be in their place if not invloved in the transfer..
            nums1[k--]=nums2[i--];
        }
    }
};

