class Solution {
public:
    int findPeakElement(vector<int>& arr) {
     int mid,low=0,high=arr.size()-1,n=arr.size();
     if(arr.size()==1){
         return 0;
     }
     while(low<=high){
         mid=(low+high)/2;
         if(mid!=0 && mid!=n-1){
             if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1]){
                 return mid;
             }
             else if(arr[mid+1]>arr[mid]){
                 low=mid+1;
             }
             else{
                 high=mid-1;
             }
         }
         else if(mid==0){
             if(arr[mid]>arr[mid+1]){
                 return 0;
             }
             else{
                 return 1;
             }
         }
         else if(mid==n-1){
             if(arr[mid-1]<arr[mid]){
                 return mid;
             }
             else{
                 return mid-1;
             }
         }
     }
        return arr[low];
    }
};

/* TEST CASES

100 100 1 2 3 3 Code does not work for duplicates like these as according to constraints on leetcode num[i]!=num[i+1]

1 2
2 1
1 2 3 4 5 6
2 3 4 6 5 7
