Given an integer numRows, return the first numRows of Pascal's triangle.

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
     vector<vector<int> >result;
     result.push_back({1});
     if(numRows==1){
         return result;
     }
     result.push_back({1,1});
     if(numRows==2){
         return result;
     }
        
     for(int i=2;i<numRows;i++){
         vector<int>ans;
         ans.push_back(1);
         for(int j=0;j<result[i-1].size()-1;j++){
             ans.push_back(result[i-1][j]+result[i-1][j+1]);
         }
         ans.push_back(1);
         result.push_back(ans);
     }
        return result;
    }
};


## Type 2
Given a positive integer N, return the Nth row of pascal's triangle.
Pascal's triangle is a triangular array of the binomial coefficients formed by summing up the elements of previous row.


  vector<ll> nthRowOfPascalTriangle(int n) {
       vector<ll>result;
       vector<ll>prev;
       prev.push_back(1);
       if(n==1){
           return prev;
       }
       int mod=1e9+7;
       for(int i=2;i<=n;i++){
           result.clear();
           result.push_back(1);
           for(int j=0;j<prev.size()-1;j++){
               result.push_back(((prev[j])%mod+(prev[j+1]%mod))%mod);
           }
           result.push_back(1);
           prev=result;
       }
       return result;
    }
};
